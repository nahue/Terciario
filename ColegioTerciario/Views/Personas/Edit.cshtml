@model ColegioTerciario.DAL.Models.Persona

@{
    ViewBag.Title = "Edit";
}

<h2>Editar</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Persona</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        <!--
        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_CODIGO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_CODIGO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_CODIGO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_USUARIO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_USUARIO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_USUARIO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_CLAVE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_CLAVE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_CLAVE, "", new { @class = "text-danger" })
            </div>
        </div>
        -->
        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_NOMBRE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_NOMBRE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_NOMBRE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_APELLIDO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_APELLIDO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_APELLIDO, "", new { @class = "text-danger" })
            </div>
        </div>
        <!--
        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_NOMBRE_PARA_MOSTRAR, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_NOMBRE_PARA_MOSTRAR, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_NOMBRE_PARA_MOSTRAR, "", new { @class = "text-danger" })
            </div>
        </div>
        -->
        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_DOCUMENTO_TIPO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_DOCUMENTO_TIPO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_DOCUMENTO_TIPO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_DOCUMENTO_NUMERO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_DOCUMENTO_NUMERO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_DOCUMENTO_NUMERO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_NACIMIENTO_FECHA, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_NACIMIENTO_FECHA, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_NACIMIENTO_FECHA, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_EMAIL, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_EMAIL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_EMAIL, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_DOMICILIO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_DOMICILIO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_DOMICILIO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_TELEFONO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_TELEFONO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_TELEFONO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_SEXO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_SEXO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_SEXO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_FECHA_ALTA, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_FECHA_ALTA, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_FECHA_ALTA, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_FECHA_BAJA, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_FECHA_BAJA, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_FECHA_BAJA, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_TITULO_SECUNDARIO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_TITULO_SECUNDARIO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_TITULO_SECUNDARIO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_OBSERVACION, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_OBSERVACION, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_OBSERVACION, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_FOTO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_FOTO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_FOTO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_CUIL, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERSONA_CUIL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERSONA_CUIL, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_ES_ALUMNO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PERSONA_ES_ALUMNO)
                    @Html.ValidationMessageFor(model => model.PERSONA_ES_ALUMNO, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_ES_DOCENTE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PERSONA_ES_DOCENTE)
                    @Html.ValidationMessageFor(model => model.PERSONA_ES_DOCENTE, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_ES_NODOCENTE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PERSONA_ES_NODOCENTE)
                    @Html.ValidationMessageFor(model => model.PERSONA_ES_NODOCENTE, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_NACIMIENTO_PAIS_ID, "Pais", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="PERSONA_NACIMIENTO_PAIS_ID" name="PERSONA_NACIMIENTO_PAIS_ID" value="@Model.PERSONA_NACIMIENTO_PAIS_ID" type="text" />
                @Html.ValidationMessageFor(model => model.PERSONA_NACIMIENTO_PAIS_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_NACIMIENTO_PROVINCIA_ID, "Provincia", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="PERSONA_NACIMIENTO_PROVINCIA_ID" name="PERSONA_NACIMIENTO_PROVINCIA_ID" value="@Model.PERSONA_NACIMIENTO_PROVINCIA_ID" type="text" />
                @Html.ValidationMessageFor(model => model.PERSONA_NACIMIENTO_PROVINCIA_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_NACIMIENTO_CIUDAD_ID, "Ciudad", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="PERSONA_NACIMIENTO_CIUDAD_ID" name="PERSONA_NACIMIENTO_CIUDAD_ID" value="@Model.PERSONA_NACIMIENTO_CIUDAD_ID" type="text" />
                @Html.ValidationMessageFor(model => model.PERSONA_NACIMIENTO_CIUDAD_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERSONA_NACIMIENTO_BARRIO_ID, "Barrio", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="PERSONA_NACIMIENTO_BARRIO_ID" name="PERSONA_NACIMIENTO_BARRIO_ID" value="@Model.PERSONA_NACIMIENTO_BARRIO_ID" type="text" />
                @Html.ValidationMessageFor(model => model.PERSONA_NACIMIENTO_BARRIO_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver a la lista", "Index") | 
    @Html.ActionLink("Eliminar", "Delete", new { id = Model.ID })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
        var pageSize = 20;
        $(document).ready(function () {
            $('#PERSONA_NACIMIENTO_FECHA').datepicker({
                    format: "dd/mm/yyyy",
                    language: "es"
                });
            
            $("#PERSONA_NACIMIENTO_PAIS_ID").select2(
            {
                //placeholder: 'Enter name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 3,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: "http://localhost:63440/Datos/GetPaises",
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected repository's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the repository name is shown preselected
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax("http://localhost:63440/Datos/GetPais/" + id, {
                            dataType: "json"
                        }).done(function (data) { callback(data); });
                    }
                },
            });

            $("#PERSONA_NACIMIENTO_PROVINCIA_ID").select2(
            {
                //placeholder: 'Enter name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 3,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: "http://localhost:63440/Datos/GetProvincias",
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected repository's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the repository name is shown preselected
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax("http://localhost:63440/Datos/GetProvincia/" + id, {
                            dataType: "json"
                        }).done(function (data) { callback(data); });
                    }
                },
            });

            $("#PERSONA_NACIMIENTO_CIUDAD_ID").select2(
            {
                //placeholder: 'Enter name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 3,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: "http://localhost:63440/Datos/GetCiudades",
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected repository's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the repository name is shown preselected
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax("http://localhost:63440/Datos/GetCiudad/" + id, {
                            dataType: "json"
                        }).done(function (data) { callback(data); });
                    }
                },
            });

            $("#PERSONA_NACIMIENTO_BARRIO_ID").select2(
            {
                //placeholder: 'Enter name',
                //Does the user have to enter any data before sending the ajax request
                minimumInputLength: 3,
                allowClear: true,
                ajax: {
                    //How long the user has to pause their typing before sending the next request
                    quietMillis: 150,
                    //The url of the json service
                    url: "http://localhost:63440/Datos/GetBarrios",
                    dataType: 'jsonp',
                    //Our search term and what page we are on
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term
                        };
                    },
                    results: function (data, page) {
                        //Used to determine whether or not there are more results available,
                        //and if requests for more data should be sent in the infinite scrolling
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    }
                },
                initSelection: function (element, callback) {
                    // the input tag has a value attribute preloaded that points to a preselected repository's id
                    // this function resolves that id attribute to an object that select2 can render
                    // using its formatResult renderer - that way the repository name is shown preselected
                    var id = $(element).val();
                    if (id !== "") {
                        $.ajax("http://localhost:63440/Datos/GetBarrio/" + id, {
                            dataType: "json"
                        }).done(function (data) { callback(data); });
                    }
                },
            });
        });
</script>
}
